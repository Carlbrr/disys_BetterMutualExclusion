// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExclusionServiceClient is the client API for ExclusionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExclusionServiceClient interface {
	AccessCritical(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ReplyMessage, error)
	ReceiveRequest(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*Void, error)
	ReceiveReply(ctx context.Context, in *ReplyMessage, opts ...grpc.CallOption) (*Void, error)
}

type exclusionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExclusionServiceClient(cc grpc.ClientConnInterface) ExclusionServiceClient {
	return &exclusionServiceClient{cc}
}

func (c *exclusionServiceClient) AccessCritical(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*ReplyMessage, error) {
	out := new(ReplyMessage)
	err := c.cc.Invoke(ctx, "/proto.ExclusionService/AccessCritical", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exclusionServiceClient) ReceiveRequest(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.ExclusionService/ReceiveRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exclusionServiceClient) ReceiveReply(ctx context.Context, in *ReplyMessage, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := c.cc.Invoke(ctx, "/proto.ExclusionService/ReceiveReply", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExclusionServiceServer is the server API for ExclusionService service.
// All implementations must embed UnimplementedExclusionServiceServer
// for forward compatibility
type ExclusionServiceServer interface {
	AccessCritical(context.Context, *RequestMessage) (*ReplyMessage, error)
	ReceiveRequest(context.Context, *RequestMessage) (*Void, error)
	ReceiveReply(context.Context, *ReplyMessage) (*Void, error)
	mustEmbedUnimplementedExclusionServiceServer()
}

// UnimplementedExclusionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExclusionServiceServer struct {
}

func (UnimplementedExclusionServiceServer) AccessCritical(context.Context, *RequestMessage) (*ReplyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccessCritical not implemented")
}
func (UnimplementedExclusionServiceServer) ReceiveRequest(context.Context, *RequestMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveRequest not implemented")
}
func (UnimplementedExclusionServiceServer) ReceiveReply(context.Context, *ReplyMessage) (*Void, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiveReply not implemented")
}
func (UnimplementedExclusionServiceServer) mustEmbedUnimplementedExclusionServiceServer() {}

// UnsafeExclusionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExclusionServiceServer will
// result in compilation errors.
type UnsafeExclusionServiceServer interface {
	mustEmbedUnimplementedExclusionServiceServer()
}

func RegisterExclusionServiceServer(s grpc.ServiceRegistrar, srv ExclusionServiceServer) {
	s.RegisterService(&ExclusionService_ServiceDesc, srv)
}

func _ExclusionService_AccessCritical_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExclusionServiceServer).AccessCritical(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ExclusionService/AccessCritical",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExclusionServiceServer).AccessCritical(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExclusionService_ReceiveRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExclusionServiceServer).ReceiveRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ExclusionService/ReceiveRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExclusionServiceServer).ReceiveRequest(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExclusionService_ReceiveReply_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReplyMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExclusionServiceServer).ReceiveReply(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ExclusionService/ReceiveReply",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExclusionServiceServer).ReceiveReply(ctx, req.(*ReplyMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// ExclusionService_ServiceDesc is the grpc.ServiceDesc for ExclusionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExclusionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ExclusionService",
	HandlerType: (*ExclusionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AccessCritical",
			Handler:    _ExclusionService_AccessCritical_Handler,
		},
		{
			MethodName: "ReceiveRequest",
			Handler:    _ExclusionService_ReceiveRequest_Handler,
		},
		{
			MethodName: "ReceiveReply",
			Handler:    _ExclusionService_ReceiveReply_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/Message.proto",
}
